{{- range $key, $val := pick .Values "sonarr" "radarr" | default dict }} # "lidarr" "readarr" "prowlarr" | default dict }}
{{- $port := $val.service.port }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $key }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "servarr.labels" $ | nindent 4 }}
    app.kubernetes.io/component: {{ $key }}
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  revisionHistoryLimit: {{ $.Values.global.revisionHistoryLimit }}
  selector:
    matchLabels:
      {{- include "servarr.selectorLabels" $ | nindent 6 }}
      app.kubernetes.io/component: {{ $key }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") $ | sha256sum }}
        {{- with $.Values.global.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with $val.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "servarr.selectorLabels" $ | nindent 8 }}
        app.kubernetes.io/component: {{ $key }}
        {{- with $.Values.global.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with $val.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with $val.selectorLabels }}
        {{- tpl (toYaml .) $ | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "servarr.serviceAccountName" $ }}
      {{- with $.Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or $.Values.global.priorityClassName $val.priorityClassName }}
      priorityClassName: {{ coalesce $.Values.global.priorityClassName $val.priorityClassName | quote }}
      {{- end }}
      {{- with $.Values.global.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ $val.terminationGracePeriodSeconds }}
      initContainers:
      - name: {{ $key }}-init-db
        image: "bitnami/postgresql:latest"
        command:
          - /bin/sh
          - -c
        args:
          - |
            echo "Creating DB for servarr..." && psql postgresql://postgres:$(POSTGRES_PASSWORD)@servarr-postgresql.media.svc.cluster.local:5432/postgres << SQL
            CREATE USER {{ $key }} WITH PASSWORD '$(POSTGRES_{{ $key | upper }}_PASSWORD)' CREATEDB CREATEROLE SUPERUSER;
            CREATE DATABASE {{ $key }}_log OWNER {{ $key }};
            CREATE DATABASE {{ $key }} OWNER {{ $key }};
            SQL
        env:
          - name: POSTGRES_{{ $key | upper }}_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "servarr.name" $ }}-postgresql
                key: postgres_{{ $key }}_password
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "servarr.name" $ }}-postgresql
                key: postgres_admin_password
      - name: {{ $key }}-init-config
        image: mikefarah/yq
        imagePullPolicy: {{ $val.image.pullPolicy | quote }}
        command:
          - /bin/sh
          - -c
        args:
          - echo "Copying config file to workspace" && cp /ro/config.xml /config/config.xml && echo "Files copied"
        volumeMounts:
          - name: config
            mountPath: /config
          - name: config-init
            mountPath: /ro
      containers:
      - name: {{ $key }}
        image: {{ printf "%s:%s" $val.image.repository $val.image.tag }}
        imagePullPolicy: {{ $val.image.pullPolicy | quote }}
        ports:
          - name: http
            containerPort: {{ default 8989 $val.service.port }}
            protocol: TCP
        volumeMounts:
          - name: config
            mountPath: /config
          - name: tmp
            mountPath: /tmp
          - name: downloads
            mountPath: /downloads
          - name: media
            mountPath: /data
        env:
          - name: TZ
            value: {{ $.Values.global.timezone | default "UTC" | quote }}
         {{- with $val.extraEnv }}
         {{- toYaml . | nindent 10 }}
         {{- end }}
        {{- with $val.extraEnvFrom }}
        envFrom:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        securityContext:
          {{- toYaml $.Values.global.containerSecurityContext | nindent 10 }}
        livenessProbe:
          exec:
            command:
            - /usr/bin/env
            - bash
            - -c
            - curl --fail localhost:{{ $port }}/api/v3/system/status?apiKey=`IFS=\\> && while read -d \\< E C; do if [[ $E = "ApiKey" ]]; then echo $C; fi; done < /config/config.xml`
          failureThreshold: 5
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        readinessProbe:
          exec:
            command:
            - /usr/bin/env
            - bash
            - -c
            - curl --fail localhost:{{ $port }}/api/v3/system/status?apiKey=`IFS=\\> && while read -d \\< E C; do if [[ $E = "ApiKey" ]]; then echo $C; fi; done < /config/config.xml`
          failureThreshold: 5
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
      {{- if or $val.metrics.enabled $val.metrics.exporter.enabled }}
      - name: exporter
        image: {{ printf "%s:%s" $val.metrics.exporter.image.repository $val.metrics.exporter.image.tag | quote }}
        ports:
          - name: metrics
            containerPort: {{ default 9543 $val.metrics.exporter.port }}
            protocol: TCP
        env:
          - name: PORT
            value: {{ default 9543 $val.metrics.exporter.port | quote }}
        volumeMounts:
          - name: config
            mountPath: /config
          - name: tmp
            mountPath: /tmp
          - name: media
            mountPath: /data
      {{- end }}
      {{- with $val.affinity }}
      affinity:
        {{- tpl . $ | nindent 8 }}
      {{- end }}
      {{- with $val.dnsConfig }}
      dnsConfig:
        {{- tpl . $ | nindent 8 }}
      {{- end }}
      {{- with $val.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $val.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: tmp
          emptyDir: {}
        - name: config
          emptyDir: {}
        - name: downloads
          persistentVolumeClaim:
            claimName: {{ include "servarr.name" $ }}-downloads
        - name: media
          persistentVolumeClaim:
            claimName: {{ include "servarr.name" $ }}-media
        - name: config-init
          configMap:
            name: {{ $.Release.Name }}-config
            items:
              - key: {{ $key }}-config.xml
                path: "config.xml"
        # Extra volumes
        {{- with $val.extraVolumes }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
{{ end -}}
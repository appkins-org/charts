global:
  image:
    registry: null
  timezone: UTC
  # -- PriorityClass for all pods
  priorityClassName: null
  # -- Common annotations for all deployments/StatefulSets
  annotations: {}
  # -- Common annotations for all pods
  podAnnotations: {}
  # -- Common labels for all pods
  podLabels: {}
  # -- Common annotations for all services
  serviceAnnotations: {}
  # -- Common labels for all services
  serviceLabels: {}
  # -- The number of old ReplicaSets to retain to allow rollback
  revisionHistoryLimit: 10
  # -- The SecurityContext for Loki pods
  podSecurityContext:
    fsGroup: 0
    runAsGroup: 0
    runAsNonRoot: false
    runAsUser: 0
  # -- The SecurityContext for Loki containers
  containerSecurityContext:
    readOnlyRootFilesystem: false
    capabilities:
      add:
        - CAP_SYS_ADMIN
      # drop:
      #   - ALL
    allowPrivilegeEscalation: true
  # -- Global postgresql configuration
  postgresql:
    auth:
      existingSecret: servarr-postgresql
      username: servarr
      database: servarr
      #  password: password
      #  postgresPassword: null
      secretKeys:
        adminPasswordKey: postgres_admin_password
        userPasswordKey: postgres_user_password

  persistence:
    storageClass: null

nameOverride: ""
fullnameOverride: ""

replicaCount: 1

imagePullSecrets: []

serviceAccount:
  # Specifies whether a service account should be created
  create: &saCreate false
  # Annotations to add to the service account
  annotations: {}

  labels: {}
  # Whether to automount the service account token
  automountServiceAccountToken: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

flemmarr:
  name: flemmarr
  image:
    repository: pierremesure/flemmarr
    tag: latest
    pullPolicy: IfNotPresent

sonarr:
  name: &sonarrName sonarr
  enabled: true

  port: &sonarPort 8989

  image:
    repository: lscr.io/linuxserver/sonarr
    tag: latest
    pullPolicy: IfNotPresent

  terminationGracePeriodSeconds: 30

  server:
    bindAddress: "*"
    port: *sonarPort
    sslPort: 9898
    enableSsl: false
    launchBrowser: false
    apiKey: null
    authenticationMethod: External
    authenticationRequired: DisabledForLocalAddresses
    branch: main
    logLevel: info
    sslCertPath: null
    sslCertPassword: null
    urlBase: null
    instanceName: *sonarrName
    updateMechanism: External
    updateAutomatically: false
    analyticsEnabled: false

  config:
    enabled: true
    host:
      analyticsEnabled: false
    ui:
      firstDayOfWeek: 1 # 0 = Sunday, 1 = Monday
      timeFormat: HH:mm # HH:mm = 17:30, h(:mm)a = 5:30PM
    naming:
      renameEpisodes: true
      replaceIllegalCharacters: true
      multiEpisodeStyle: 5
      # https://trash-guides.info/Sonarr/Sonarr-recommended-naming-scheme/
      standardEpisodeFormat: "{Series TitleYear} - S{season:00}E{episode:00} - {Episode CleanTitle} [{Preferred Words }{Quality Full}]{[MediaInfo VideoDynamicRangeType]}{[Mediainfo AudioCodec}{ Mediainfo AudioChannels]}{MediaInfo AudioLanguages}{[MediaInfo VideoCodec]}{-Release Group}"
      dailyEpisodeFormat: "{Series TitleYear} - {Air-Date} - {Episode CleanTitle} [{Preferred Words }{Quality Full}]{[MediaInfo VideoDynamicRangeType]}{[Mediainfo AudioCodec}{Mediainfo AudioChannels]}{MediaInfo AudioLanguages}{[MediaInfo VideoCodec]}{-Release Group}"
      animeEpisodeFormat: "{Series TitleYear} - S{season:00}E{episode:00} - {absolute:000} - {Episode CleanTitle} [{Preferred Words }{Quality Full}]{[MediaInfo VideoDynamicRangeType]}[{MediaInfo VideoBitDepth}bit]{[MediaInfo VideoCodec]}[{Mediainfo AudioCodec} { Mediainfo AudioChannels}]{MediaInfo AudioLanguages}{-Release Group}"
      seriesFolderFormat: "{Series TitleYear} [imdb-{ImdbId}]"
      seasonFolderFormat: "Season {season:00}"
      specialsFolderFormat: Specials
      includeSeriesTitle: false
      includeEpisodeTitle: false
      includeQuality: false
      replaceSpaces: true
      separator: " - "
      numberStyle: "S{season:00}E{episode:00}"
    mediamanagement:
      autoUnmonitorPreviouslyDownloadedEpisodes: false
      recycleBin: ""
      recycleBinCleanupDays: 7
      downloadPropersAndRepacks: doNotUpgrade
      createEmptySeriesFolders: false
      deleteEmptyFolders: false
      fileDate: none
      rescanAfterRefresh: always
      setPermissionsLinux: false
      chmodFolder: "755"
      chownGroup: ""
      episodeTitleRequired: always
      skipFreeSpaceCheckWhenImporting: true
      minimumFreeSpaceWhenImporting: 100
      copyUsingHardlinks: true
      importExtraFiles: true
      extraFileExtensions: srt
      enableMediaInfo: true

  rootfolder: []
  #  - name: Series
  #    path: /data/series
  #    defaultTags: []
  #    defaultQualityProfileId: 1
  #    defaultMetadataProfileId: 1

  env:
    TZ: UTC

  annotations: {}
  podLabels: {}
  selectorLabels: {}
  podAnnotations: {}
  affinity: {}
  extraArgs: []
  # -- Environment variables to add to the canary pods
  extraEnv: []
  # -- Environment variables from secrets or configmaps to add to the canary pods
  extraEnvFrom: []
  # -- Resource requests and limits for the canary
  resources: {}
  # -- DNS config for canary pods
  dnsConfig: {}
  # -- Node selector for canary pods
  nodeSelector: {}
  # -- Tolerations for canary pods
  tolerations: []
  # -- The name of the PriorityClass for loki-canary pods
  priorityClassName: null

  configStorageType: ConfigMap

  replicas: 2

  service:
    port: *sonarPort
    type: ClusterIP

  ingress:
    enabled: false

  autoscaling:
    enabled: false

  extraVolumes: []

  existingSecretForConfig: null
  externalConfigSecretName: ""

  readinessProbe: {}

  postgresql:
    enabled: false
    # username: sonarr
    password: null
    # database: sonarr-main
    # host: postgresql
    # port: 5432
    # logdb: sonarr-log

  persistence:
    config:
      enabled: false

    media:
      enabled: false
      mountPath: /media

  metrics:
    enabled: false
    # -- Enable and configure Exportarr sidecar and Prometheus serviceMonitor.
    # @default -- See values.yaml
    serviceMonitor:
      interval: 3m
      scrapeTimeout: 1m
      labels: {}
    # -- Enable and configure Prometheus Rules for the chart under this key.
    # @default -- See values.yaml
    prometheusRule:
      enabled: false
      labels: {}
      # -- Configure additionial rules for the chart under this key.
      # @default -- See prometheusrules.yaml
      rules:
        []
        # - alert: SonarrDown
        #   annotations:
        #     description: Sonarr service is down.
        #     summary: Sonarr is down.
        #   expr: |
        #     sonarr_system_status == 0
        #   for: 5m
        #   labels:
        #     severity: critical
    exporter:
      enabled: false
      image:
        # -- image repository
        repository: ghcr.io/onedr0p/exportarr
        # -- image tag
        tag: latest
        # -- image pull policy
        pullPolicy: IfNotPresent
      port: 9707
      env:
        # -- metrics port
        port: 9794
        # -- Set to true to enable gathering of additional metrics (slow)
        additionalMetrics: false
        # -- Set to true to enable gathering unknown queue items
        unknownQueueItems: false

###
# Prowlarr specific values
###
prowlarr:
  enabled: true
  name: prowlarr

  image:
    repository: lscr.io/linuxserver/prowlarr
    tag: latest
    pullPolicy: IfNotPresent

  env:
    TZ: UTC

  service:
    port: 9696

  ingress:
    enabled: false

  autoscaling:
    enabled: false

# Configuration for the radarr pod(s)
radarr:
  name: &radarrName radarr
  enabled: true

  port: &radarrPort 7878

  image:
    repository: lscr.io/linuxserver/radarr
    tag: latest
    pullPolicy: IfNotPresent

  terminationGracePeriodSeconds: 30

  server:
    bindAddress: "*"
    port: *radarrPort
    sslPort: 9898
    enableSsl: false
    launchBrowser: false
    apiKey: null
    authenticationMethod: External
    authenticationRequired: DisabledForLocalAddresses
    branch: main
    logLevel: info
    sslCertPath: null
    sslCertPassword: null
    urlBase: null
    instanceName: *radarrName
    updateMechanism: External
    updateAutomatically: false
    analyticsEnabled: false

  config:
    enabled: true
    host:
      analyticsEnabled: false
    ui:
      firstDayOfWeek: 1 # 0 = Sunday, 1 = Monday
      timeFormat: HH:mm # HH:mm = 17:30, h(:mm)a = 5:30PM
    naming:
      renameEpisodes: true
      replaceIllegalCharacters: true
      multiEpisodeStyle: 5
      # https://trash-guides.info/Radarr/Radarr-recommended-naming-scheme/
      standardEpisodeFormat: "{Series TitleYear} - S{season:00}E{episode:00} - {Episode CleanTitle} [{Preferred Words }{Quality Full}]{[MediaInfo VideoDynamicRangeType]}{[Mediainfo AudioCodec}{ Mediainfo AudioChannels]}{MediaInfo AudioLanguages}{[MediaInfo VideoCodec]}{-Release Group}"
      dailyEpisodeFormat: "{Series TitleYear} - {Air-Date} - {Episode CleanTitle} [{Preferred Words }{Quality Full}]{[MediaInfo VideoDynamicRangeType]}{[Mediainfo AudioCodec}{Mediainfo AudioChannels]}{MediaInfo AudioLanguages}{[MediaInfo VideoCodec]}{-Release Group}"
      animeEpisodeFormat: "{Series TitleYear} - S{season:00}E{episode:00} - {absolute:000} - {Episode CleanTitle} [{Preferred Words }{Quality Full}]{[MediaInfo VideoDynamicRangeType]}[{MediaInfo VideoBitDepth}bit]{[MediaInfo VideoCodec]}[{Mediainfo AudioCodec} { Mediainfo AudioChannels}]{MediaInfo AudioLanguages}{-Release Group}"
      seriesFolderFormat: "{Series TitleYear} [imdb-{ImdbId}]"
      seasonFolderFormat: "Season {season:00}"
      specialsFolderFormat: Specials
      includeSeriesTitle: false
      includeEpisodeTitle: false
      includeQuality: false
      replaceSpaces: true
      separator: " - "
      numberStyle: "S{season:00}E{episode:00}"
    mediamanagement:
      autoUnmonitorPreviouslyDownloadedEpisodes: false
      recycleBin: ""
      recycleBinCleanupDays: 7
      downloadPropersAndRepacks: doNotUpgrade
      createEmptySeriesFolders: false
      deleteEmptyFolders: false
      fileDate: none
      rescanAfterRefresh: always
      setPermissionsLinux: false
      chmodFolder: "755"
      chownGroup: ""
      episodeTitleRequired: always
      skipFreeSpaceCheckWhenImporting: true
      minimumFreeSpaceWhenImporting: 100
      copyUsingHardlinks: true
      importExtraFiles: true
      extraFileExtensions: srt
      enableMediaInfo: true

  rootfolder: []
  #  - name: Series
  #    path: /data/series
  #    defaultTags: []
  #    defaultQualityProfileId: 1
  #    defaultMetadataProfileId: 1

  env:
    TZ: UTC

  annotations: {}
  podLabels: {}
  selectorLabels: {}
  podAnnotations: {}
  affinity: {}
  extraArgs: []
  # -- Environment variables to add to the canary pods
  extraEnv: []
  # -- Environment variables from secrets or configmaps to add to the canary pods
  extraEnvFrom: []
  # -- Resource requests and limits for the canary
  resources: {}
  # -- DNS config for canary pods
  dnsConfig: {}
  # -- Node selector for canary pods
  nodeSelector: {}
  # -- Tolerations for canary pods
  tolerations: []
  # -- The name of the PriorityClass for loki-canary pods
  priorityClassName: null

  configStorageType: ConfigMap

  replicas: 2

  service:
    port: *radarrPort
    type: ClusterIP

  ingress:
    enabled: false

  autoscaling:
    enabled: false

  extraVolumes: []

  existingSecretForConfig: null
  externalConfigSecretName: ""

  readinessProbe: {}

  postgresql:
    enabled: false
    # username: radarr
    password: null
    # database: radarr-main
    # host: postgresql
    # port: 5432
    # logdb: radarr-log

  persistence:
    config:
      enabled: false

    media:
      enabled: false
      mountPath: /media

  metrics:
    enabled: false
    # -- Enable and configure Exportarr sidecar and Prometheus serviceMonitor.
    # @default -- See values.yaml
    serviceMonitor:
      interval: 3m
      scrapeTimeout: 1m
      labels: {}
    # -- Enable and configure Prometheus Rules for the chart under this key.
    # @default -- See values.yaml
    prometheusRule:
      enabled: false
      labels: {}
      # -- Configure additionial rules for the chart under this key.
      # @default -- See prometheusrules.yaml
      rules:
        []
        # - alert: RadarrDown
        #   annotations:
        #     description: Radarr service is down.
        #     summary: Radarr is down.
        #   expr: |
        #     radarr_system_status == 0
        #   for: 5m
        #   labels:
        #     severity: critical
    exporter:
      enabled: false
      image:
        # -- image repository
        repository: ghcr.io/onedr0p/exportarr
        # -- image tag
        tag: latest
        # -- image pull policy
        pullPolicy: IfNotPresent
      port: 9707
      env:
        # -- metrics port
        port: 9794
        # -- Set to true to enable gathering of additional metrics (slow)
        additionalMetrics: false
        # -- Set to true to enable gathering unknown queue items
        unknownQueueItems: false
# Configuration for the lidarr pod(s)
lidarr:
  name: lidarr
  enabled: true

  image:
    repository: lscr.io/linuxserver/lidarr
    pullPolicy: IfNotPresent
    tag: latest

  service:
    port: 8686

  autoscaling:
    enabled: false
# Configuration for the readarr pod(s)
readarr:
  name: readarr
  enabled: true

  image:
    repository: lscr.io/linuxserver/readarr
    pullPolicy: IfNotPresent
    tag: latest

  service:
    port: 8787

  autoscaling:
    enabled: false

  annotations: {}
# Configuration for the qbittorrent pod(s)
qbittorrent:
  name: qbittorrent
  image:
    repository: lscr.io/linuxserver/sonarr
    tag: latest
    pullPolicy: IfNotPresent

  config:
    autoRun:
      enabled: false
      program: ""
    locking:
      locked: false
    bitTorrent:
      session:
        defaultSavePath: /downloads/
        port: 6881
        queueingSystemEnabled: true
        tempPath: /downloads/
    legalNotice:
      accepted: true
    meta:
      migrationVersion: 4
    network:
      portForwardingEnabled: false
    preferences:
      connection:
        portRangeMin: 6881
        uPnP: false
      downloads:
        savePath: /downloads/
        tempPath: /downloads/
      webUI:
        address: "*"
        port: 8080
        serverDomains: "*"
        alternativeUIEnabled: true
        rootFolder: /data/vuetorrent
        hostHeaderValidation: false
        cSRFProtection: false
        customHTTPHeadersEnabled: false
        authSubnetWhitelistEnabled: true
        authSubnetWhitelist:
  customWebUi:
    enabled: true
    name: custom-webui
    image:
      repository: busybox
      tag: latest
      pullPolicy: IfNotPresent
    archiveUrl: https://github.com/WDaan/VueTorrent/releases/download/v1.6.1/vuetorrent.zip
    # command:
    #   - "/bin/sh"
    #   - "-c"
    # args:
    #   - wget -qO- https://github.com/WDaan/VueTorrent/releases/download/v1.6.1/vuetorrent.zip | unzip - -d /data

  vpn:
    enabled: false
    name: vpn
    image: qmcgaw/gluetun:latest
    pullPolicy: IfNotPresent
    port: 8000
    securityContext:
      capabilities:
        add:
          - NET_ADMIN
          - SYS_MODULE
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi
    env: []

    config:
      type: openvpn

      serviceProvider: nordvpn

      wireguard:
        enabled: false
        privateKey: ""
        addresses: ""
        publicKey: ""

      openvpn:
        enabled: true
        user: openvpn
        password: password

      firewall:
        inputPorts: "8080,8000,9022"
        outboundSubnets: "10.0.0.0/8"
        vpnInputPorts: "6881"
    #  - name: FIREWALL_INPUT_PORTS
    #    value: 8080,8000,9022
    #  - name: FIREWALL_OUTBOUND_SUBNETS
    #    value: 10.0.0.0/8
    #  - name: FIREWALL_VPN_INPUT_PORTS
    #    value: "6881"
    #  - name: HTTP_CONTROL_SERVER_ADDRESS
    #    value: :8000
    #  - name: HTTP_CONTROL_SERVER_LOG
    #    value: "true"
    #  - name: OPENVPN_PASSWORD
    #    value: password
    #  - name: OPENVPN_USER
    #    value: openvpn
    #  - name: SERVER_COUNTRIES
    #    value: United States
    #  - name: SERVER_REGIONS
    #    value: America
    #  - name: TZ
    #    value: UTC
    #  - name: VPN_SERVICE_PROVIDER
    #    value: nordvpn
    #  - name: VPN_TYPE
    #    value: openvpn
    #  - name: WIREGUARD_PRIVATE_KEY
    #    value: af6b72b3-84ac-4d88-8d80-f9f604f66538
    livenessProbe:
      failureThreshold: 1
      httpGet:
        path: /v1/openvpn/status
        port: control-port
      initialDelaySeconds: 30
      periodSeconds: 60
      successThreshold: 1
      terminationGracePeriodSeconds: 60

  env:
    TZ: UTC

  configStorageType: ConfigMap

  service:
    port: 8000

  ingress:
    enabled: false

  autoscaling:
    enabled: false

  extraEnv: []
  extraEnvFrom: []
  extraVolumes: []

  existingSecretForConfig: null
  externalConfigSecretName: ""

  readinessProbe: {}

###
# Transmission specific values
###
transmission:
  fullname: transmission
  image:
    repository: lscr.io/linuxserver/transmission
    pullPolicy: IfNotPresent
    tag: latest
  initContainers:
    custom-webui:
      name: custom-webui
      image: curlimages/curl:latest
      command:
        - "/bin/sh"
        - "-c"
        - "curl -o- -sL https://github.com/johman10/flood-for-transmission/releases/download/latest/flood-for-transmission.tar.gz | tar xzf - -C /config"
      volumeMounts:
        - name: config
          mountPath: /config
      securityContext:
        runAsUser: 568
        runAsGroup: 568
  env:
    # -- Set the container timezone
    TZ: UTC
    # -- Path in container where the Web UI is located
    TRANSMISSION_WEB_HOME: /config/flood-for-transmission/
    # -- Password to access the Web UI
    TRANSMISSION_RPC_PASSWORD: CHANGEME
    # -- Torrent download directory
    TRANSMISSION_DOWNLOAD_DIR: /downloads/complete
    # -- Enable incomplete download directory
    TRANSMISSION_INCOMPLETE_DIR_ENABLED: false
    # -- Incomplete download directory
    TRANSMISSION_INCOMPLETE_DIR: /downloads/incomplete
    # -- Enable watch directory
    TRANSMISSION_WATCH_DIR_ENABLED: false
    # -- Watch directory
    TRANSMISSION_WATCH_DIR: /watch

  ingress:
    # -- Enable and configure ingress settings for the chart under this key.
    # @default -- See values.yaml
    main:
      enabled: false
      annotations: {}
      # - grafana.appkins.io
      hosts: []
      # tls:
      #    - hosts:
      #        - grafana.appkins.io
      tls: []

  persistence:
    config:
      enabled: false
      mountPath: /config

    downloads:
      enabled: false
      mountPath: /downloads

    watch:
      enabled: false
      mountPath: /watch

postgresql:
  nameOverride: servarr-postgresql
  fullnameOverride: servarr-postgresql

  serviceAccount:
    create: *saCreate
  auth:
    enablePostgresUser: true
    existingSecret: servarr-secret
  #  postgresPassword: ""
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 3m
      scrapeTimeout: 1m
      labels: {}
    prometheusRule:
      enabled: true
      labels: {}
      rules: []
